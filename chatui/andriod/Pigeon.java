// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.chat_ui_sample;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Input {
    private @Nullable String displayName;
    public @Nullable String getDisplayName() { return displayName; }
    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    private @NonNull Long instanceId;
    public @NonNull Long getInstanceId() { return instanceId; }
    public void setInstanceId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"instanceId\" is null.");
      }
      this.instanceId = setterArg;
    }

    private @NonNull String threadId;
    public @NonNull String getThreadId() { return threadId; }
    public void setThreadId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"threadId\" is null.");
      }
      this.threadId = setterArg;
    }

    private @NonNull String identity;
    public @NonNull String getIdentity() { return identity; }
    public void setIdentity(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"identity\" is null.");
      }
      this.identity = setterArg;
    }

    private @NonNull String endpointUrl;
    public @NonNull String getEndpointUrl() { return endpointUrl; }
    public void setEndpointUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpointUrl\" is null.");
      }
      this.endpointUrl = setterArg;
    }

    private @NonNull String acsToken;
    public @NonNull String getAcsToken() { return acsToken; }
    public void setAcsToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"acsToken\" is null.");
      }
      this.acsToken = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Input() {}
    public static final class Builder {
      private @Nullable String displayName;
      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }
      private @Nullable Long instanceId;
      public @NonNull Builder setInstanceId(@NonNull Long setterArg) {
        this.instanceId = setterArg;
        return this;
      }
      private @Nullable String threadId;
      public @NonNull Builder setThreadId(@NonNull String setterArg) {
        this.threadId = setterArg;
        return this;
      }
      private @Nullable String identity;
      public @NonNull Builder setIdentity(@NonNull String setterArg) {
        this.identity = setterArg;
        return this;
      }
      private @Nullable String endpointUrl;
      public @NonNull Builder setEndpointUrl(@NonNull String setterArg) {
        this.endpointUrl = setterArg;
        return this;
      }
      private @Nullable String acsToken;
      public @NonNull Builder setAcsToken(@NonNull String setterArg) {
        this.acsToken = setterArg;
        return this;
      }
      public @NonNull Input build() {
        Input pigeonReturn = new Input();
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setInstanceId(instanceId);
        pigeonReturn.setThreadId(threadId);
        pigeonReturn.setIdentity(identity);
        pigeonReturn.setEndpointUrl(endpointUrl);
        pigeonReturn.setAcsToken(acsToken);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("displayName", displayName);
      toMapResult.put("instanceId", instanceId);
      toMapResult.put("threadId", threadId);
      toMapResult.put("identity", identity);
      toMapResult.put("endpointUrl", endpointUrl);
      toMapResult.put("acsToken", acsToken);
      return toMapResult;
    }
    static @NonNull Input fromMap(@NonNull Map<String, Object> map) {
      Input pigeonResult = new Input();
      Object displayName = map.get("displayName");
      pigeonResult.setDisplayName((String)displayName);
      Object instanceId = map.get("instanceId");
      pigeonResult.setInstanceId((instanceId == null) ? null : ((instanceId instanceof Integer) ? (Integer)instanceId : (Long)instanceId));
      Object threadId = map.get("threadId");
      pigeonResult.setThreadId((String)threadId);
      Object identity = map.get("identity");
      pigeonResult.setIdentity((String)identity);
      Object endpointUrl = map.get("endpointUrl");
      pigeonResult.setEndpointUrl((String)endpointUrl);
      Object acsToken = map.get("acsToken");
      pigeonResult.setAcsToken((String)acsToken);
      return pigeonResult;
    }
  }
  private static class AzureCommunicationUIHostApiCodec extends StandardMessageCodec {
    public static final AzureCommunicationUIHostApiCodec INSTANCE = new AzureCommunicationUIHostApiCodec();
    private AzureCommunicationUIHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Input.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Input) {
        stream.write(128);
        writeValue(stream, ((Input) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AzureCommunicationUIHostApi {
    void startChatComposite(@NonNull Input options);

    /** The codec used by AzureCommunicationUIHostApi. */
    static MessageCodec<Object> getCodec() {
      return       AzureCommunicationUIHostApiCodec.INSTANCE;    }
    /**Sets up an instance of `AzureCommunicationUIHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AzureCommunicationUIHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AzureCommunicationUIHostApi.startChatComposite", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Input optionsArg = (Input)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              api.startChatComposite(optionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
