// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTInput ()
+ (FLTInput *)fromMap:(NSDictionary *)dict;
+ (nullable FLTInput *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTInput
+ (instancetype)makeWithDisplayName:(nullable NSString *)displayName
    instanceId:(NSNumber *)instanceId
    threadId:(NSString *)threadId
    identity:(NSString *)identity
    endpointUrl:(NSString *)endpointUrl
    acsToken:(NSString *)acsToken {
  FLTInput* pigeonResult = [[FLTInput alloc] init];
  pigeonResult.displayName = displayName;
  pigeonResult.instanceId = instanceId;
  pigeonResult.threadId = threadId;
  pigeonResult.identity = identity;
  pigeonResult.endpointUrl = endpointUrl;
  pigeonResult.acsToken = acsToken;
  return pigeonResult;
}
+ (FLTInput *)fromMap:(NSDictionary *)dict {
  FLTInput *pigeonResult = [[FLTInput alloc] init];
  pigeonResult.displayName = GetNullableObject(dict, @"displayName");
  pigeonResult.instanceId = GetNullableObject(dict, @"instanceId");
  NSAssert(pigeonResult.instanceId != nil, @"");
  pigeonResult.threadId = GetNullableObject(dict, @"threadId");
  NSAssert(pigeonResult.threadId != nil, @"");
  pigeonResult.identity = GetNullableObject(dict, @"identity");
  NSAssert(pigeonResult.identity != nil, @"");
  pigeonResult.endpointUrl = GetNullableObject(dict, @"endpointUrl");
  NSAssert(pigeonResult.endpointUrl != nil, @"");
  pigeonResult.acsToken = GetNullableObject(dict, @"acsToken");
  NSAssert(pigeonResult.acsToken != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInput *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTInput fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"displayName" : (self.displayName ?: [NSNull null]),
    @"instanceId" : (self.instanceId ?: [NSNull null]),
    @"threadId" : (self.threadId ?: [NSNull null]),
    @"identity" : (self.identity ?: [NSNull null]),
    @"endpointUrl" : (self.endpointUrl ?: [NSNull null]),
    @"acsToken" : (self.acsToken ?: [NSNull null]),
  };
}
@end

@interface FLTAzureCommunicationUIHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTAzureCommunicationUIHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTInput fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTAzureCommunicationUIHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTAzureCommunicationUIHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTInput class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTAzureCommunicationUIHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTAzureCommunicationUIHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTAzureCommunicationUIHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTAzureCommunicationUIHostApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *FLTAzureCommunicationUIHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTAzureCommunicationUIHostApiCodecReaderWriter *readerWriter = [[FLTAzureCommunicationUIHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTAzureCommunicationUIHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTAzureCommunicationUIHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AzureCommunicationUIHostApi.startChatComposite"
        binaryMessenger:binaryMessenger
        codec:FLTAzureCommunicationUIHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startChatCompositeOptions:error:)], @"FLTAzureCommunicationUIHostApi api (%@) doesn't respond to @selector(startChatCompositeOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInput *arg_options = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startChatCompositeOptions:arg_options error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
